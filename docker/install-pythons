#!/usr/bin/env python3.8
from __future__ import annotations

import argparse
import hashlib
import os.path
import platform
import re
import secrets
import subprocess
import sys
import tempfile

# gsutil cp gs://sentry-dev-infra-assets/prebuilt-pythons/python-{3.8.14+0,3.9.14+0,3.10.7+0}.sha256sums -
CHECKSUMS = """\
a12c422a785da15f77c4b89d6a1cc547e5c4294fd28d1bac2278c2a8f0db658a  python-3.8.14+0-macosx_11_0_x86_64.tgz
7c2712e99b6aacf4cf4f60b3c8c4166b3335d0c0e922e4537e8865b3340e3903  python-3.8.14+0-macosx_12_0_arm64.tgz
4db4c25a9c780f0c263524de23e49618e2b9fe3dfaffc563f13e3c621eca8eb2  python-3.8.14+0-manylinux_2_28_aarch64.tgz
c6056d07fc3ffd291e988071560aa1eafca134ced2f59575a7e29ce61fcd6029  python-3.8.14+0-manylinux_2_28_x86_64.tgz
e04f5f97f7dd0819553e7a9a15c2a0d5b198dbb7c611398d51832592e6b55d4b  python-3.9.14+0-macosx_11_0_x86_64.tgz
94e33b3bb4f2084cf34be7d86063a99b1b95dd592bbb68320d152bfe257f78b2  python-3.9.14+0-macosx_12_0_arm64.tgz
1c16775e97ebc39c872fb604e024c167d05081a2d75905e0b6d7fc32f2171e28  python-3.9.14+0-manylinux_2_28_aarch64.tgz
841e1a99954f689c669025851f99332e6935b0f3383bc56f8e855bc2885cc2ef  python-3.9.14+0-manylinux_2_28_x86_64.tgz
19bae9c15bdc9d061e287de65fc39795f2b153a4b9d6b6dd73be9104e6ec5953  python-3.10.7+0-macosx_11_0_x86_64.tgz
ff7f2ee9a4f63dfc6e485d84a8487af3408610adc206a1f632ccb1bdf773d37e  python-3.10.7+0-macosx_12_0_arm64.tgz
ab40d751da81fb6755318d1be8c5a99aa3b09a2208850f152ef3c3ac8090f112  python-3.10.7+0-manylinux_2_28_aarch64.tgz
af795da2bc476a5c59001f8588d46f85ef8399743b598a6910a2423e11d18568  python-3.10.7+0-manylinux_2_28_x86_64.tgz
"""
VERSIONS = ("3.8.14+0", "3.9.14+0", "3.10.7+0")
PLAT_TAG = {"linux": "manylinux", "darwin": "macosx"}
PLAT_RE = re.compile(f"{PLAT_TAG[sys.platform]}_.+{platform.machine()}$")


def _checksum_url(version: str) -> tuple[str, str]:
    for line in CHECKSUMS.splitlines():
        sha256, filename = line.split()
        base, _ = os.path.splitext(filename)
        _, f_version, plat = base.split("-")
        if version == f_version and PLAT_RE.match(plat):
            return (
                sha256,
                f"https://storage.googleapis.com/sentry-dev-infra-assets/prebuilt-pythons/{filename}",
            )
    else:
        raise NotImplementedError(version, sys.platform, platform.machine())


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument("--dest", default="/opt/python")
    args = parser.parse_args()

    os.makedirs(args.dest, exist_ok=True)

    for version in VERSIONS:
        with tempfile.TemporaryDirectory() as tmpdir:
            expected, url = _checksum_url(version)

            major, minor, *_ = version.split(".")
            dest = os.path.join(args.dest, f"cp{major}{minor}-cp{major}{minor}")
            tgz_dest = os.path.join(tmpdir, "python.tgz")

            curl_cmd = ("curl", "--silent", "--location", "--output", tgz_dest, url)
            subprocess.check_call(curl_cmd)

            with open(tgz_dest, "rb") as f:
                sha256 = hashlib.sha256(f.read()).hexdigest()
            if not secrets.compare_digest(sha256, expected):
                raise AssertionError(f"checksum mismatch {sha256=} {expected=}")

            os.makedirs(dest, exist_ok=True)
            tar_cmd = ("tar", "-C", dest, "--strip-components=1", "-xf", tgz_dest)
            subprocess.check_call(tar_cmd)

            py = os.path.join(dest, "bin", "python3")
            subprocess.check_call((py, "-mensurepip"))
            subprocess.check_call((py, "-mpip", "install", "wheel==0.37.1"))
            subprocess.check_call((py, "--version", "--version"))

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
