#!/usr/bin/env python3
from __future__ import annotations

import argparse
import hashlib
import json
import os.path
import shutil
import subprocess
import tempfile
import urllib.parse
import urllib.request
import zipfile
from collections.abc import Sequence


def _get_metadata_bytes(filename: str) -> bytes:
    with zipfile.ZipFile(filename) as zipf:
        (metadata,) = (
            name
            for name in zipf.namelist()
            if name.endswith(".dist-info/METADATA") and name.count("/") == 1
        )
        with zipf.open(metadata) as f:
            return f.read()


def main(argv: Sequence[str] | None = None) -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument("--pypi-url", required=True)
    args = parser.parse_args(argv)

    url = urllib.parse.urljoin(args.pypi_url, "packages.json")
    packages = [json.loads(line) for line in urllib.request.urlopen(url)]

    with tempfile.TemporaryDirectory() as tmpdir:
        os.makedirs(f"{tmpdir}/metadata")
        for package in packages:
            basename = os.path.basename(package["filename"])

            if package.get("core_metadata"):
                print(f"skipping: core metadata already present for {basename}")
                continue

            url = f"{args.pypi_url}/wheels/{basename}"
            fn = f"{tmpdir}/{basename}"

            with urllib.request.urlopen(url) as resp, open(fn, "wb") as f:
                shutil.copyfileobj(resp, f)

            metadata_bytes = _get_metadata_bytes(fn)
            metadata_sha256 = hashlib.sha256(metadata_bytes).hexdigest()

            with open(f"{tmpdir}/metadata/{basename}.metadata", "wb") as f:
                f.write(metadata_bytes)

            package["core_metadata"] = f"sha256={metadata_sha256}"
            print(f"core metadata fetched for {basename}")

        packages_json = os.path.join(tmpdir, "packages.json")
        with open(packages_json, "w") as f:
            for package in packages:
                f.write(f"{json.dumps(package)}\n")

        subprocess.check_call(
            (
                "gcloud",
                "storage",
                "cp",
                "-n",  # no-clobber
                "--cache-control",
                "public, max-age=3600",
                f"{tmpdir}/metadata/*",
                "gs://pypi.devinfra.sentry.io/wheels/",
            )
        )
        subprocess.check_call(
            (
                "gcloud",
                "storage",
                "cp",
                # the packages.json file must be consistently read so no caching
                "--cache-control",
                "no-store",
                packages_json,
                "gs://pypi.devinfra.sentry.io",
            )
        )

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
